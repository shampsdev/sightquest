definitions:
  auth.wrapToken:
    properties:
      token:
        type: string
    type: object
  domain.Coordinate:
    properties:
      lat:
        type: number
      lon:
        type: number
    type: object
  domain.Game:
    properties:
      admin:
        $ref: '#/definitions/domain.User'
      createdAt:
        type: string
      finishedAt:
        type: string
      id:
        type: string
      players:
        items:
          $ref: '#/definitions/domain.Player'
        type: array
      state:
        $ref: '#/definitions/domain.GameState'
    type: object
  domain.GameState:
    enum:
    - lobby
    - game
    - poll
    - finished
    type: string
    x-enum-varnames:
    - GameStateLobby
    - GameStateGame
    - GameStatePoll
    - GameStateFinished
  domain.Player:
    properties:
      gameId:
        type: string
      location:
        $ref: '#/definitions/domain.Coordinate'
      role:
        $ref: '#/definitions/domain.PlayerRole'
      score:
        type: integer
      user:
        $ref: '#/definitions/domain.User'
    type: object
  domain.PlayerRole:
    enum:
    - runner
    - catcher
    type: string
    x-enum-varnames:
    - PlayerRoleRunner
    - PlayerRoleCatcher
  domain.User:
    properties:
      avatar:
        type: string
      background:
        type: string
      createdAt:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
  domain.UserCredentials:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  title: Sightquest server
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.UserCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.wrapToken'
        "400":
          description: Bad Request
      summary: Login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.UserCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.wrapToken'
        "400":
          description: Bad Request
      summary: Register user
      tags:
      - auth
  /auth/verify:
    post:
      consumes:
      - application/json
      parameters:
      - description: token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/auth.wrapToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
      summary: Verify token
      tags:
      - auth
  /game:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Game'
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Create game
      tags:
      - game
  /game/id/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Game ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Game'
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Get game by id
      tags:
      - game
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-API-Token
    type: apiKey
swagger: "2.0"
