// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.UserCredentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.userToken"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.CreateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.userToken"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/game": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "game"
                ],
                "summary": "Create game",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seed for game",
                        "name": "seed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Game"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/game/id/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "game"
                ],
                "summary": "Get game by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Game ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Game"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/game/latest": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "game"
                ],
                "summary": "Get last N games for a player",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of games to return",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "lobby",
                            "game",
                            "poll",
                            "finished"
                        ],
                        "type": "string",
                        "description": "Game state",
                        "name": "state",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Game"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/images/upload/by_file": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "images"
                ],
                "summary": "Upload file to s3",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Image data",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Directory in s3 storage",
                        "name": "dir",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A url to the stored image",
                        "schema": {
                            "$ref": "#/definitions/image.UploadResponse"
                        }
                    },
                    "400": {
                        "description": "Parsing error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/route": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "route"
                ],
                "summary": "Get all routes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Route"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/route/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "route"
                ],
                "summary": "Get route by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Route ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Route"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/route/{id}/buy": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "route"
                ],
                "summary": "Buy route",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Route ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/styles": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "style"
                ],
                "summary": "Get available styles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Style type filter",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Bought filter",
                        "name": "bought",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Style"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/styles/id/{id}/buy": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "style"
                ],
                "summary": "Buy style",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Style ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/styles/me/avatar": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "style"
                ],
                "summary": "Set avatar style",
                "parameters": [
                    {
                        "description": "Style ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/style.setAvatarRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/user/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get me",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Patch me",
                "parameters": [
                    {
                        "description": "User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.PatchUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.userToken": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/domain.User"
                }
            }
        },
        "domain.CompletedTaskPoint": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "gameId": {
                    "type": "string"
                },
                "photo": {
                    "type": "string"
                },
                "playerId": {
                    "type": "string"
                },
                "pointId": {
                    "type": "string"
                },
                "score": {
                    "type": "integer"
                }
            }
        },
        "domain.Coordinate": {
            "type": "object",
            "properties": {
                "lat": {
                    "type": "number"
                },
                "lon": {
                    "type": "number"
                }
            }
        },
        "domain.CreateUser": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "domain.Game": {
            "type": "object",
            "properties": {
                "activePoll": {
                    "$ref": "#/definitions/domain.Poll"
                },
                "admin": {
                    "$ref": "#/definitions/domain.User"
                },
                "completedTaskPoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.CompletedTaskPoint"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "finishedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "players": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Player"
                    }
                },
                "route": {
                    "$ref": "#/definitions/domain.Route"
                },
                "seed": {
                    "type": "string"
                },
                "state": {
                    "$ref": "#/definitions/domain.GameState"
                }
            }
        },
        "domain.GameState": {
            "type": "string",
            "enum": [
                "lobby",
                "game",
                "poll",
                "finished"
            ],
            "x-enum-varnames": [
                "GameStateLobby",
                "GameStateGame",
                "GameStatePoll",
                "GameStateFinished"
            ]
        },
        "domain.PatchUser": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "styles": {
                    "$ref": "#/definitions/domain.UserStyles"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "domain.Player": {
            "type": "object",
            "properties": {
                "gameId": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/domain.Coordinate"
                },
                "role": {
                    "$ref": "#/definitions/domain.PlayerRole"
                },
                "score": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/domain.User"
                }
            }
        },
        "domain.PlayerRole": {
            "type": "string",
            "enum": [
                "runner",
                "catcher"
            ],
            "x-enum-varnames": [
                "PlayerRoleRunner",
                "PlayerRoleCatcher"
            ]
        },
        "domain.Poll": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "$ref": "#/definitions/domain.PollData"
                },
                "duration": {
                    "type": "integer"
                },
                "finishedAt": {
                    "type": "string"
                },
                "gameId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "result": {
                    "$ref": "#/definitions/domain.PollResult"
                },
                "state": {
                    "$ref": "#/definitions/domain.PollState"
                },
                "type": {
                    "$ref": "#/definitions/domain.PollType"
                },
                "votes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Vote"
                    }
                }
            }
        },
        "domain.PollData": {
            "type": "object",
            "properties": {
                "finishGame": {
                    "$ref": "#/definitions/domain.PollDataFinishGame"
                },
                "pause": {
                    "$ref": "#/definitions/domain.PollDataPause"
                },
                "playerCatch": {
                    "$ref": "#/definitions/domain.PollDataPlayerCatch"
                },
                "taskComplete": {
                    "$ref": "#/definitions/domain.PollDataTaskComplete"
                }
            }
        },
        "domain.PollDataFinishGame": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "suggestedBy": {
                    "$ref": "#/definitions/domain.Player"
                }
            }
        },
        "domain.PollDataPause": {
            "type": "object",
            "properties": {
                "duration": {
                    "type": "integer"
                },
                "pausedBy": {
                    "$ref": "#/definitions/domain.Player"
                }
            }
        },
        "domain.PollDataPlayerCatch": {
            "type": "object",
            "properties": {
                "catchedBy": {
                    "$ref": "#/definitions/domain.Player"
                },
                "photo": {
                    "type": "string"
                },
                "runner": {
                    "$ref": "#/definitions/domain.Player"
                }
            }
        },
        "domain.PollDataTaskComplete": {
            "type": "object",
            "properties": {
                "photo": {
                    "type": "string"
                },
                "player": {
                    "$ref": "#/definitions/domain.Player"
                },
                "task": {
                    "$ref": "#/definitions/domain.TaskPoint"
                }
            }
        },
        "domain.PollResult": {
            "type": "object",
            "properties": {
                "finishGame": {
                    "$ref": "#/definitions/domain.PollResultFinishGame"
                },
                "pause": {
                    "$ref": "#/definitions/domain.PollResultPause"
                },
                "playerCatch": {
                    "$ref": "#/definitions/domain.PollResultPlayerCatch"
                },
                "taskComplete": {
                    "$ref": "#/definitions/domain.PollResultTaskComplete"
                }
            }
        },
        "domain.PollResultFinishGame": {
            "type": "object",
            "properties": {
                "approved": {
                    "type": "boolean"
                }
            }
        },
        "domain.PollResultPause": {
            "type": "object",
            "properties": {
                "unpausedBy": {
                    "$ref": "#/definitions/domain.Player"
                }
            }
        },
        "domain.PollResultPlayerCatch": {
            "type": "object",
            "properties": {
                "approved": {
                    "type": "boolean"
                },
                "catcherReward": {
                    "type": "integer"
                },
                "newRunner": {
                    "$ref": "#/definitions/domain.Player"
                }
            }
        },
        "domain.PollResultTaskComplete": {
            "type": "object",
            "properties": {
                "approved": {
                    "type": "boolean"
                },
                "completedTaskPoint": {
                    "$ref": "#/definitions/domain.CompletedTaskPoint"
                }
            }
        },
        "domain.PollState": {
            "type": "string",
            "enum": [
                "active",
                "finished"
            ],
            "x-enum-varnames": [
                "PollStateActive",
                "PollStateFinished"
            ]
        },
        "domain.PollType": {
            "type": "string",
            "enum": [
                "pause",
                "taskComplete",
                "playerCatch",
                "finishGame"
            ],
            "x-enum-varnames": [
                "PollTypePause",
                "PollTypeTaskComplete",
                "PollTypePlayerCatch",
                "PollTypeFinishGame"
            ]
        },
        "domain.Route": {
            "type": "object",
            "properties": {
                "bought": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "priceRoubles": {
                    "type": "integer"
                },
                "taskPoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.TaskPoint"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "domain.Style": {
            "type": "object",
            "properties": {
                "bought": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "priceRoubles": {
                    "type": "integer"
                },
                "style": {},
                "title": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/domain.StyleType"
                }
            }
        },
        "domain.StyleType": {
            "type": "string",
            "enum": [
                "avatar"
            ],
            "x-enum-varnames": [
                "StyleTypeAvatar"
            ]
        },
        "domain.TaskPoint": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/domain.Coordinate"
                },
                "score": {
                    "type": "integer"
                },
                "task": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "domain.User": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "styles": {
                    "$ref": "#/definitions/domain.UserStyles"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "domain.UserCredentials": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "domain.UserStyles": {
            "type": "object",
            "properties": {
                "avatarId": {
                    "type": "string"
                }
            }
        },
        "domain.Vote": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "data": {
                    "$ref": "#/definitions/domain.VoteData"
                },
                "gameId": {
                    "type": "string"
                },
                "playerId": {
                    "type": "string"
                },
                "pollId": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/domain.VoteType"
                }
            }
        },
        "domain.VoteData": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                }
            }
        },
        "domain.VoteType": {
            "type": "string",
            "enum": [
                "unpause",
                "taskApprove",
                "taskReject",
                "playerCatchApprove",
                "playerCatchReject",
                "finishGameApprove",
                "finishGameReject"
            ],
            "x-enum-varnames": [
                "VoteTypeUnpause",
                "VoteTypeTaskApprove",
                "VoteTypeTaskReject",
                "VoteTypePlayerCatchApprove",
                "VoteTypePlayerCatchReject",
                "VoteTypeFinishGameApprove",
                "VoteTypeFinishGameReject"
            ]
        },
        "image.UploadResponse": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                }
            }
        },
        "style.setAvatarRequest": {
            "type": "object",
            "properties": {
                "styleId": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "X-API-Token",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Sightquest server",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
