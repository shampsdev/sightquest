// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go
//
// Generated by this command:
//
//	mockgen -source=repo.go -destination=mocks/repo_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/shampsdev/sightquest/server/pkg/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
	isgomock struct{}
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUser) CreateUser(ctx context.Context, user *domain.CreateUser, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserMockRecorder) CreateUser(ctx, user, password any) *MockUserCreateUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUser)(nil).CreateUser), ctx, user, password)
	return &MockUserCreateUserCall{Call: call}
}

// MockUserCreateUserCall wrap *gomock.Call
type MockUserCreateUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserCreateUserCall) Return(arg0 string, arg1 error) *MockUserCreateUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserCreateUserCall) Do(f func(context.Context, *domain.CreateUser, string) (string, error)) *MockUserCreateUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserCreateUserCall) DoAndReturn(f func(context.Context, *domain.CreateUser, string) (string, error)) *MockUserCreateUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByEmail mocks base method.
func (m *MockUser) GetUserByEmail(ctx context.Context, userID string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, userID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserMockRecorder) GetUserByEmail(ctx, userID any) *MockUserGetUserByEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUser)(nil).GetUserByEmail), ctx, userID)
	return &MockUserGetUserByEmailCall{Call: call}
}

// MockUserGetUserByEmailCall wrap *gomock.Call
type MockUserGetUserByEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserGetUserByEmailCall) Return(arg0 *domain.User, arg1 error) *MockUserGetUserByEmailCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserGetUserByEmailCall) Do(f func(context.Context, string) (*domain.User, error)) *MockUserGetUserByEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserGetUserByEmailCall) DoAndReturn(f func(context.Context, string) (*domain.User, error)) *MockUserGetUserByEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByID mocks base method.
func (m *MockUser) GetUserByID(ctx context.Context, userID string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserMockRecorder) GetUserByID(ctx, userID any) *MockUserGetUserByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUser)(nil).GetUserByID), ctx, userID)
	return &MockUserGetUserByIDCall{Call: call}
}

// MockUserGetUserByIDCall wrap *gomock.Call
type MockUserGetUserByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserGetUserByIDCall) Return(arg0 *domain.User, arg1 error) *MockUserGetUserByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserGetUserByIDCall) Do(f func(context.Context, string) (*domain.User, error)) *MockUserGetUserByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserGetUserByIDCall) DoAndReturn(f func(context.Context, string) (*domain.User, error)) *MockUserGetUserByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByUsername mocks base method.
func (m *MockUser) GetUserByUsername(ctx context.Context, userID string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, userID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserMockRecorder) GetUserByUsername(ctx, userID any) *MockUserGetUserByUsernameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUser)(nil).GetUserByUsername), ctx, userID)
	return &MockUserGetUserByUsernameCall{Call: call}
}

// MockUserGetUserByUsernameCall wrap *gomock.Call
type MockUserGetUserByUsernameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserGetUserByUsernameCall) Return(arg0 *domain.User, arg1 error) *MockUserGetUserByUsernameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserGetUserByUsernameCall) Do(f func(context.Context, string) (*domain.User, error)) *MockUserGetUserByUsernameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserGetUserByUsernameCall) DoAndReturn(f func(context.Context, string) (*domain.User, error)) *MockUserGetUserByUsernameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserPassword mocks base method.
func (m *MockUser) GetUserPassword(ctx context.Context, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPassword", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPassword indicates an expected call of GetUserPassword.
func (mr *MockUserMockRecorder) GetUserPassword(ctx, userID any) *MockUserGetUserPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPassword", reflect.TypeOf((*MockUser)(nil).GetUserPassword), ctx, userID)
	return &MockUserGetUserPasswordCall{Call: call}
}

// MockUserGetUserPasswordCall wrap *gomock.Call
type MockUserGetUserPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserGetUserPasswordCall) Return(arg0 string, arg1 error) *MockUserGetUserPasswordCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserGetUserPasswordCall) Do(f func(context.Context, string) (string, error)) *MockUserGetUserPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserGetUserPasswordCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockUserGetUserPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
