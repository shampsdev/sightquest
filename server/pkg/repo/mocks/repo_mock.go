// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go
//
// Generated by this command:
//
//	mockgen -source=repo.go -destination=mocks/repo_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/shampsdev/sightquest/server/pkg/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
	isgomock struct{}
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUser) Create(ctx context.Context, user *domain.CreateUser) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserMockRecorder) Create(ctx, user any) *MockUserCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUser)(nil).Create), ctx, user)
	return &MockUserCreateCall{Call: call}
}

// MockUserCreateCall wrap *gomock.Call
type MockUserCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserCreateCall) Return(arg0 string, arg1 error) *MockUserCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserCreateCall) Do(f func(context.Context, *domain.CreateUser) (string, error)) *MockUserCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserCreateCall) DoAndReturn(f func(context.Context, *domain.CreateUser) (string, error)) *MockUserCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockUser) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserMockRecorder) Delete(ctx, id any) *MockUserDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUser)(nil).Delete), ctx, id)
	return &MockUserDeleteCall{Call: call}
}

// MockUserDeleteCall wrap *gomock.Call
type MockUserDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserDeleteCall) Return(arg0 error) *MockUserDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserDeleteCall) Do(f func(context.Context, string) error) *MockUserDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserDeleteCall) DoAndReturn(f func(context.Context, string) error) *MockUserDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockUser) Filter(ctx context.Context, filter *domain.FilterUser) ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx, filter)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockUserMockRecorder) Filter(ctx, filter any) *MockUserFilterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockUser)(nil).Filter), ctx, filter)
	return &MockUserFilterCall{Call: call}
}

// MockUserFilterCall wrap *gomock.Call
type MockUserFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserFilterCall) Return(arg0 []*domain.User, arg1 error) *MockUserFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserFilterCall) Do(f func(context.Context, *domain.FilterUser) ([]*domain.User, error)) *MockUserFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserFilterCall) DoAndReturn(f func(context.Context, *domain.FilterUser) ([]*domain.User, error)) *MockUserFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPassword mocks base method.
func (m *MockUser) GetPassword(ctx context.Context, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockUserMockRecorder) GetPassword(ctx, userID any) *MockUserGetPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockUser)(nil).GetPassword), ctx, userID)
	return &MockUserGetPasswordCall{Call: call}
}

// MockUserGetPasswordCall wrap *gomock.Call
type MockUserGetPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserGetPasswordCall) Return(arg0 string, arg1 error) *MockUserGetPasswordCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserGetPasswordCall) Do(f func(context.Context, string) (string, error)) *MockUserGetPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserGetPasswordCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockUserGetPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockUser) Patch(ctx context.Context, id string, user *domain.PatchUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", ctx, id, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockUserMockRecorder) Patch(ctx, id, user any) *MockUserPatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockUser)(nil).Patch), ctx, id, user)
	return &MockUserPatchCall{Call: call}
}

// MockUserPatchCall wrap *gomock.Call
type MockUserPatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserPatchCall) Return(arg0 error) *MockUserPatchCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserPatchCall) Do(f func(context.Context, string, *domain.PatchUser) error) *MockUserPatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserPatchCall) DoAndReturn(f func(context.Context, string, *domain.PatchUser) error) *MockUserPatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockGame is a mock of Game interface.
type MockGame struct {
	ctrl     *gomock.Controller
	recorder *MockGameMockRecorder
	isgomock struct{}
}

// MockGameMockRecorder is the mock recorder for MockGame.
type MockGameMockRecorder struct {
	mock *MockGame
}

// NewMockGame creates a new mock instance.
func NewMockGame(ctrl *gomock.Controller) *MockGame {
	mock := &MockGame{ctrl: ctrl}
	mock.recorder = &MockGameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGame) EXPECT() *MockGameMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGame) Create(ctx context.Context, game *domain.CreateGame) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, game)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGameMockRecorder) Create(ctx, game any) *MockGameCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGame)(nil).Create), ctx, game)
	return &MockGameCreateCall{Call: call}
}

// MockGameCreateCall wrap *gomock.Call
type MockGameCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGameCreateCall) Return(arg0 string, arg1 error) *MockGameCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGameCreateCall) Do(f func(context.Context, *domain.CreateGame) (string, error)) *MockGameCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGameCreateCall) DoAndReturn(f func(context.Context, *domain.CreateGame) (string, error)) *MockGameCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockGame) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGameMockRecorder) Delete(ctx, id any) *MockGameDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGame)(nil).Delete), ctx, id)
	return &MockGameDeleteCall{Call: call}
}

// MockGameDeleteCall wrap *gomock.Call
type MockGameDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGameDeleteCall) Return(arg0 error) *MockGameDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGameDeleteCall) Do(f func(context.Context, string) error) *MockGameDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGameDeleteCall) DoAndReturn(f func(context.Context, string) error) *MockGameDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockGame) Filter(ctx context.Context, filter *domain.FilterGame) ([]*domain.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx, filter)
	ret0, _ := ret[0].([]*domain.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockGameMockRecorder) Filter(ctx, filter any) *MockGameFilterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockGame)(nil).Filter), ctx, filter)
	return &MockGameFilterCall{Call: call}
}

// MockGameFilterCall wrap *gomock.Call
type MockGameFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGameFilterCall) Return(arg0 []*domain.Game, arg1 error) *MockGameFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGameFilterCall) Do(f func(context.Context, *domain.FilterGame) ([]*domain.Game, error)) *MockGameFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGameFilterCall) DoAndReturn(f func(context.Context, *domain.FilterGame) ([]*domain.Game, error)) *MockGameFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockGame) Patch(ctx context.Context, id string, game *domain.PatchGame) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", ctx, id, game)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockGameMockRecorder) Patch(ctx, id, game any) *MockGamePatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockGame)(nil).Patch), ctx, id, game)
	return &MockGamePatchCall{Call: call}
}

// MockGamePatchCall wrap *gomock.Call
type MockGamePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGamePatchCall) Return(arg0 error) *MockGamePatchCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGamePatchCall) Do(f func(context.Context, string, *domain.PatchGame) error) *MockGamePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGamePatchCall) DoAndReturn(f func(context.Context, string, *domain.PatchGame) error) *MockGamePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPlayer is a mock of Player interface.
type MockPlayer struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerMockRecorder
	isgomock struct{}
}

// MockPlayerMockRecorder is the mock recorder for MockPlayer.
type MockPlayerMockRecorder struct {
	mock *MockPlayer
}

// NewMockPlayer creates a new mock instance.
func NewMockPlayer(ctrl *gomock.Controller) *MockPlayer {
	mock := &MockPlayer{ctrl: ctrl}
	mock.recorder = &MockPlayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayer) EXPECT() *MockPlayerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPlayer) Create(ctx context.Context, player *domain.CreatePlayer) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, player)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPlayerMockRecorder) Create(ctx, player any) *MockPlayerCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPlayer)(nil).Create), ctx, player)
	return &MockPlayerCreateCall{Call: call}
}

// MockPlayerCreateCall wrap *gomock.Call
type MockPlayerCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPlayerCreateCall) Return(arg0 string, arg1 error) *MockPlayerCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPlayerCreateCall) Do(f func(context.Context, *domain.CreatePlayer) (string, error)) *MockPlayerCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPlayerCreateCall) DoAndReturn(f func(context.Context, *domain.CreatePlayer) (string, error)) *MockPlayerCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockPlayer) Delete(ctx context.Context, gameID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, gameID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPlayerMockRecorder) Delete(ctx, gameID, userID any) *MockPlayerDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPlayer)(nil).Delete), ctx, gameID, userID)
	return &MockPlayerDeleteCall{Call: call}
}

// MockPlayerDeleteCall wrap *gomock.Call
type MockPlayerDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPlayerDeleteCall) Return(arg0 error) *MockPlayerDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPlayerDeleteCall) Do(f func(context.Context, string, string) error) *MockPlayerDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPlayerDeleteCall) DoAndReturn(f func(context.Context, string, string) error) *MockPlayerDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockPlayer) Filter(ctx context.Context, filter *domain.FilterPlayer) ([]*domain.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx, filter)
	ret0, _ := ret[0].([]*domain.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockPlayerMockRecorder) Filter(ctx, filter any) *MockPlayerFilterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockPlayer)(nil).Filter), ctx, filter)
	return &MockPlayerFilterCall{Call: call}
}

// MockPlayerFilterCall wrap *gomock.Call
type MockPlayerFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPlayerFilterCall) Return(arg0 []*domain.Player, arg1 error) *MockPlayerFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPlayerFilterCall) Do(f func(context.Context, *domain.FilterPlayer) ([]*domain.Player, error)) *MockPlayerFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPlayerFilterCall) DoAndReturn(f func(context.Context, *domain.FilterPlayer) ([]*domain.Player, error)) *MockPlayerFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockPlayer) Patch(ctx context.Context, gameID, userID string, player *domain.PatchPlayer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", ctx, gameID, userID, player)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockPlayerMockRecorder) Patch(ctx, gameID, userID, player any) *MockPlayerPatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockPlayer)(nil).Patch), ctx, gameID, userID, player)
	return &MockPlayerPatchCall{Call: call}
}

// MockPlayerPatchCall wrap *gomock.Call
type MockPlayerPatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPlayerPatchCall) Return(arg0 error) *MockPlayerPatchCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPlayerPatchCall) Do(f func(context.Context, string, string, *domain.PatchPlayer) error) *MockPlayerPatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPlayerPatchCall) DoAndReturn(f func(context.Context, string, string, *domain.PatchPlayer) error) *MockPlayerPatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRoute is a mock of Route interface.
type MockRoute struct {
	ctrl     *gomock.Controller
	recorder *MockRouteMockRecorder
	isgomock struct{}
}

// MockRouteMockRecorder is the mock recorder for MockRoute.
type MockRouteMockRecorder struct {
	mock *MockRoute
}

// NewMockRoute creates a new mock instance.
func NewMockRoute(ctrl *gomock.Controller) *MockRoute {
	mock := &MockRoute{ctrl: ctrl}
	mock.recorder = &MockRouteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoute) EXPECT() *MockRouteMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRoute) Create(ctx context.Context, route *domain.CreateRoute) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, route)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRouteMockRecorder) Create(ctx, route any) *MockRouteCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoute)(nil).Create), ctx, route)
	return &MockRouteCreateCall{Call: call}
}

// MockRouteCreateCall wrap *gomock.Call
type MockRouteCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteCreateCall) Return(arg0 string, arg1 error) *MockRouteCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteCreateCall) Do(f func(context.Context, *domain.CreateRoute) (string, error)) *MockRouteCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteCreateCall) DoAndReturn(f func(context.Context, *domain.CreateRoute) (string, error)) *MockRouteCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockRoute) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRouteMockRecorder) Delete(ctx, id any) *MockRouteDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoute)(nil).Delete), ctx, id)
	return &MockRouteDeleteCall{Call: call}
}

// MockRouteDeleteCall wrap *gomock.Call
type MockRouteDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteDeleteCall) Return(arg0 error) *MockRouteDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteDeleteCall) Do(f func(context.Context, string) error) *MockRouteDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteDeleteCall) DoAndReturn(f func(context.Context, string) error) *MockRouteDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockRoute) Filter(ctx context.Context, filter *domain.FilterRoute) ([]*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx, filter)
	ret0, _ := ret[0].([]*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockRouteMockRecorder) Filter(ctx, filter any) *MockRouteFilterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockRoute)(nil).Filter), ctx, filter)
	return &MockRouteFilterCall{Call: call}
}

// MockRouteFilterCall wrap *gomock.Call
type MockRouteFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteFilterCall) Return(arg0 []*domain.Route, arg1 error) *MockRouteFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteFilterCall) Do(f func(context.Context, *domain.FilterRoute) ([]*domain.Route, error)) *MockRouteFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteFilterCall) DoAndReturn(f func(context.Context, *domain.FilterRoute) ([]*domain.Route, error)) *MockRouteFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockRoute) Patch(ctx context.Context, id string, route *domain.PatchRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", ctx, id, route)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockRouteMockRecorder) Patch(ctx, id, route any) *MockRoutePatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockRoute)(nil).Patch), ctx, id, route)
	return &MockRoutePatchCall{Call: call}
}

// MockRoutePatchCall wrap *gomock.Call
type MockRoutePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRoutePatchCall) Return(arg0 error) *MockRoutePatchCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRoutePatchCall) Do(f func(context.Context, string, *domain.PatchRoute) error) *MockRoutePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRoutePatchCall) DoAndReturn(f func(context.Context, string, *domain.PatchRoute) error) *MockRoutePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTaskPoint is a mock of TaskPoint interface.
type MockTaskPoint struct {
	ctrl     *gomock.Controller
	recorder *MockTaskPointMockRecorder
	isgomock struct{}
}

// MockTaskPointMockRecorder is the mock recorder for MockTaskPoint.
type MockTaskPointMockRecorder struct {
	mock *MockTaskPoint
}

// NewMockTaskPoint creates a new mock instance.
func NewMockTaskPoint(ctrl *gomock.Controller) *MockTaskPoint {
	mock := &MockTaskPoint{ctrl: ctrl}
	mock.recorder = &MockTaskPointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskPoint) EXPECT() *MockTaskPointMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskPoint) Create(ctx context.Context, taskPoint *domain.CreateTaskPoint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, taskPoint)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTaskPointMockRecorder) Create(ctx, taskPoint any) *MockTaskPointCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskPoint)(nil).Create), ctx, taskPoint)
	return &MockTaskPointCreateCall{Call: call}
}

// MockTaskPointCreateCall wrap *gomock.Call
type MockTaskPointCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskPointCreateCall) Return(arg0 string, arg1 error) *MockTaskPointCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskPointCreateCall) Do(f func(context.Context, *domain.CreateTaskPoint) (string, error)) *MockTaskPointCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskPointCreateCall) DoAndReturn(f func(context.Context, *domain.CreateTaskPoint) (string, error)) *MockTaskPointCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockTaskPoint) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskPointMockRecorder) Delete(ctx, id any) *MockTaskPointDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskPoint)(nil).Delete), ctx, id)
	return &MockTaskPointDeleteCall{Call: call}
}

// MockTaskPointDeleteCall wrap *gomock.Call
type MockTaskPointDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskPointDeleteCall) Return(arg0 error) *MockTaskPointDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskPointDeleteCall) Do(f func(context.Context, string) error) *MockTaskPointDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskPointDeleteCall) DoAndReturn(f func(context.Context, string) error) *MockTaskPointDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockTaskPoint) Filter(ctx context.Context, filter *domain.FilterTaskPoint) ([]*domain.TaskPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx, filter)
	ret0, _ := ret[0].([]*domain.TaskPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockTaskPointMockRecorder) Filter(ctx, filter any) *MockTaskPointFilterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockTaskPoint)(nil).Filter), ctx, filter)
	return &MockTaskPointFilterCall{Call: call}
}

// MockTaskPointFilterCall wrap *gomock.Call
type MockTaskPointFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskPointFilterCall) Return(arg0 []*domain.TaskPoint, arg1 error) *MockTaskPointFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskPointFilterCall) Do(f func(context.Context, *domain.FilterTaskPoint) ([]*domain.TaskPoint, error)) *MockTaskPointFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskPointFilterCall) DoAndReturn(f func(context.Context, *domain.FilterTaskPoint) ([]*domain.TaskPoint, error)) *MockTaskPointFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockTaskPoint) Patch(ctx context.Context, id string, taskPoint *domain.PatchTaskPoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", ctx, id, taskPoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockTaskPointMockRecorder) Patch(ctx, id, taskPoint any) *MockTaskPointPatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockTaskPoint)(nil).Patch), ctx, id, taskPoint)
	return &MockTaskPointPatchCall{Call: call}
}

// MockTaskPointPatchCall wrap *gomock.Call
type MockTaskPointPatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskPointPatchCall) Return(arg0 error) *MockTaskPointPatchCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskPointPatchCall) Do(f func(context.Context, string, *domain.PatchTaskPoint) error) *MockTaskPointPatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskPointPatchCall) DoAndReturn(f func(context.Context, string, *domain.PatchTaskPoint) error) *MockTaskPointPatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
